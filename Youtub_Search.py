import os
import asyncio
import logging
import time
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import ClientTimeout
from aiogram.client.session.aiohttp import AiohttpSession
from subprocess import run
from aiogram.client.telegram import TelegramAPIServer
from yt_dlp import YoutubeDL
from mega import Mega
from dotenv import load_dotenv
import subprocess
from transformers import GPT2Tokenizer, GPT2LMHeadModel

load_dotenv()

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
MEGA_EMAIL = os.getenv('MEGA_EMAIL')
MEGA_PASSWORD = os.getenv('MEGA_PASSWORD')
FFMPEG_PATH = os.getenv('FFMPEG_PATH')

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä GPT-2 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
model = GPT2LMHeadModel.from_pretrained("gpt2")
tokenizer = GPT2Tokenizer.from_pretrained("gpt2")

def save_user_input_to_file(user_input, ai_response):
    data = {"user_input": user_input, "ai_response": ai_response}
    with open("user_conversations.json", "a") as file:
        json.dump(data, file)
        file.write("\n")

def generate_response(user_input: str) -> str:
    inputs = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors="pt")
    outputs = model.generate(inputs, max_length=150, num_return_sequences=1, no_repeat_ngram_size=2, temperature=0.7)
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    save_user_input_to_file(user_input, response)
    return response

def get_video_resolution(file_path):
    result = subprocess.run(
        [FFMPEG_PATH, '-i', file_path],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )

    for line in result.stderr.splitlines():
        if "Video:" in line:
            resolution = [s for s in line.split() if 'x' in s]
            if resolution:
                return resolution[0]  # –ù–∞–ø—Ä–∏–º–µ—Ä, 1920x1080
    return None

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
def scale_video(input_file, output_file, target_resolution):
    width, height = map(int, target_resolution.split('x'))
    subprocess.run([
        FFMPEG_PATH, '-i', input_file,
        '-vf', f"scale={width}:{height}:force_original_aspect_ratio=decrease,pad={width}:{height}:(ow-iw)/2:(oh-ih)/2",
        '-c:v', 'libx264', '-c:a', 'aac', '-strict', 'experimental',
        output_file
    ])

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
TARGET_QUALITIES = {
    '360p': '640x360',
    '480p': '854x480',
    '720p': '1280x720',
    '1080p': '1920x1080'
}

# –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è MEGA
mega = Mega()
m = mega.login(email=MEGA_EMAIL, password=MEGA_PASSWORD)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—á–µ—Å—Ç–≤–∞–º–∏
def get_quality_keyboard(qualities):
    if not qualities:
        logger.error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –≤–∏–¥–µ–æ.")
        return None

    buttons = [
        [InlineKeyboardButton(text=quality, callback_data=f"quality_{idx}")]
        for idx, quality in enumerate(qualities)
    ]
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def process_video_with_aspect_ratio(filename_video, filename_audio, final_video_filename, target_resolution="1920x1080"):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    width, height = map(int, target_resolution.split('x'))
    run([
        FFMPEG_PATH, '-i', filename_video, '-i', filename_audio,
        '-vf', f'scale={width}:{height}:force_original_aspect_ratio=decrease,pad={width}:{height}:(ow-iw)/2:(oh-ih)/2',
        '-c:v', 'libx264', '-c:a', 'aac', '-strict', 'experimental',
        '-shortest', final_video_filename
    ])

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserState(StatesGroup):
    wait_link_or_query = State()  # –û–∂–∏–¥–∞–µ–º —Å—Å—ã–ª–∫—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å
    wait_quality_choice = State()  # –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    wait_ai_query = State()  # –û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è AI

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def on_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    button_1 = InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å YouTube", callback_data="download_video")
    button_2 = InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é AI", callback_data="ask_ai")
    keyboard.add(button_1, button_2)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –¥–≤—É–º—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

async def get_video_by_link_or_query(message: types.Message, state: FSMContext):
    await message.answer("üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–±–ª–æ–≥–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'cat videos' –∏–ª–∏ 'tech reviews').")
    await state.set_state(UserState.wait_link_or_query)

async def get_link_or_query(message: types.Message, state: FSMContext):
    query_or_url = message.text.strip()
    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
        if "youtube.com" in query_or_url or "youtu.be" in query_or_url:
            url = query_or_url
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å, –∏—â–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp
            ydl_opts_search = {
                'quiet': True,
                'format': 'best',
                'noplaylist': True,
                'extract_flat': True,  # –≠—Ç–æ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ, –∞ —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            }
            with YoutubeDL(ydl_opts_search) as ydl:
                info = ydl.extract_info(f"ytsearch:{query_or_url}", download=False)
                url = info['entries'][0]['url']  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –∏–∑ –ø–æ–∏—Å–∫–∞
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {url}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        ydl_opts = {
            'quiet': True,
            'format': 'best',
        }
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            formats = info.get('formats', [])

            available_resolutions = [fmt.get('height') for fmt in formats if fmt.get('height')]
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {available_resolutions}")

            quality_list = []
            filtered_formats = []

            for fmt in formats:
                height = fmt.get('height')
                if height in [int(k[:-1]) for k in TARGET_QUALITIES.keys()] and height not in [q['height'] for q in filtered_formats]:
                    resolution = f"{height}p"
                    quality_list.append(resolution)
                    filtered_formats.append({'format': fmt, 'height': height})

            if not quality_list:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.")
                return

            await state.update_data({'formats': filtered_formats, 'url': url})
            keyboard = get_quality_keyboard(quality_list)
            await message.answer("‚úÖ –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:", reply_markup=keyboard)
            await state.set_state(UserState.wait_quality_choice)

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞: {e}')
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")

async def ai_query_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ò–ò.")
    await state.set_state(UserState.wait_ai_query)

async def handle_ai_query(message: types.Message, state: FSMContext):
    user_input = message.text
    response = generate_response(user_input)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
    await message.answer(response)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def quality_choice(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "cancel":
        await callback_query.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return

    try:
        choice = int(callback_query.data.split('_')[1])
        data = await state.get_data()
        formats = data.get('formats')
        url = data.get('url')

        if not formats or choice < 0 or choice >= len(formats):
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        selected_format = formats[choice]['format']
        video_format_id = selected_format['format_id']
        resolution = f"{selected_format['height']}p"
        target_resolution = TARGET_QUALITIES.get(resolution, "1920x1080")
        filename_video = f"videos/{time.time()}_video.mp4"
        filename_audio = f"videos/{time.time()}_audio.mp3"
        ydl_opts_video = {
            'format': video_format_id,
            'outtmpl': filename_video
        }
        ydl_opts_audio = {
            'format': 'bestaudio/best',
            'outtmpl': filename_audio
        }

        await state.update_data({'ready': False})
        progress_message = await callback_query.message.answer("‚è≥ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
        try:
            with YoutubeDL(ydl_opts_video) as ydl:
                ydl.download([url])

            with YoutubeDL(ydl_opts_audio) as ydl:
                ydl.download([url])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ: {e}")
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ–ª–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω 9:16)
        final_video_filename = f"videos/{time.time()}_final.mp4"

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ–¥ —Ü–µ–ª–µ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        process_video_with_aspect_ratio(filename_video, filename_audio, final_video_filename, target_resolution=target_resolution)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Mega
        file = m.upload(final_video_filename)
        public_url = m.get_upload_link(file)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ
        await callback_query.message.edit_text("üé¨ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
        try:
            video = FSInputFile(final_video_filename)
            await callback_query.message.answer_video(video, caption="üé¨ –í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ —Å –∞—É–¥–∏–æ!", width=1920, height=1080)
        except Exception as e:
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        finally:
            os.remove(final_video_filename)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.remove(filename_video)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            os.remove(filename_audio)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
            await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    timeout = 180000

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    session = AiohttpSession(
        api=TelegramAPIServer.from_base('http://localhost:8081'),
        timeout=timeout
    )
    bot = Bot(token=BOT_TOKEN, session=session)

    # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    from aiogram.fsm.storage.memory import MemoryStorage
    storage = MemoryStorage()

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher(storage=storage)
    dp['bot'] = bot

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(on_start, Command("start"))
    dp.message.register(get_video_by_link_or_query, Command("link"))
    dp.message.register(get_link_or_query, UserState.wait_link_or_query)
    dp.message.register(handle_ai_query, UserState.wait_ai_query)
    dp.callback_query.register(quality_choice)
    dp.callback_query.register(ai_query_handler, lambda callback_query: callback_query.data == 'ask_ai')
    dp.callback_query.register(get_video_by_link_or_query, lambda callback_query: callback_query.data == 'download_video')

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
if __name__ == "__main__":
    asyncio.run(main())
